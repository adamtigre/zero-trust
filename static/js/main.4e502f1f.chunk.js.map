{"version":3,"sources":["MyForm.js","App.js","index.js"],"names":["MyForm","create","useState","show","setShow","partyInvolved","setPartyInvolved","description","setDescription","expectedAmount","setExpectedAmount","submitMyForm","a","console","log","handleClose","Button","variant","onClick","Modal","onHide","Header","closeButton","Title","Body","Form","Group","className","controlId","Label","Control","type","placeholder","onChange","e","target","value","as","rows","Footer","truncateAddress","address","slice","length","BondCard","cfms","bd","catg","signBond","validateBond","confirmBond","closeBond","id","BigNumber","amount","shiftedBy","toString","creator","confirmations","Number","signed","validated","completed","hidden","App","balance","setBalance","wallet","setWallet","admin","setAdmin","contract","setContract","kit","setKit","bonds","setBonds","bondsCreated","setBondsCreated","bondsToSign","setBondsToSign","bondsToConfirm","setBondsToConfirm","bondsToValidate","setBondsToValidate","bondsToClose","setBondsToClose","totalAF","setTotalAF","getBal","getTotalBalance","bal","CELO","toFixed","_contract","web3","eth","Contract","zbondAbi","methods","getAdmin","call","_admin","connectWallet","window","celo","enable","Web3","newKitFromWeb3","getAccounts","accounts","defaultAccount","alert","getBonds","getLength","_bondsLength","_bonds","i","_bond","Promise","resolve","reject","viewBond","b","push","all","bnds","createBond","expected","send","from","bondId","location","reload","bond","makeConfirmation","withdrawAF","withdrawAccumulatedFees","getTAF","getTotalAdminFees","taf","useEffect","_bondsToSign","filter","filterBondsToSign","_bondsToValidate","filterBondsToValidate","_bondsToConfirm","filterBondsToConfirm","_bondsToClose","filterBondsToClose","bc","filterBondsCreated","map","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4e502f1f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\n\r\nfunction MyForm({ create }) {\r\n  const [show, setShow] = useState(false);\r\n  const [partyInvolved, setPartyInvolved] = useState();\r\n  const [description, setDescription] = useState();\r\n  const [expectedAmount, setExpectedAmount] = useState();\r\n\r\n  const submitMyForm = async () => {\r\n    await create(description, partyInvolved, expectedAmount);\r\n    console.log(\"Created new bond\");\r\n    handleClose();\r\n  };\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  return (\r\n    <>\r\n      <Button variant=\"primary\" onClick={handleShow}>\r\n        New Bond\r\n      </Button>\r\n\r\n      <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Create New Bond</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form>\r\n            <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlInput1\">\r\n              <Form.Label>Including</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Enter second party wallet address\"\r\n                onChange={(e) => setPartyInvolved(e.target.value)}\r\n              />\r\n            </Form.Group>\r\n            <Form.Group\r\n              className=\"mb-3\"\r\n              controlId=\"exampleForm.ControlTextarea1\"\r\n            >\r\n              <Form.Label>Description</Form.Label>\r\n              <Form.Control\r\n                as=\"textarea\"\r\n                rows={3}\r\n                onChange={(e) => setDescription(e.target.value)}\r\n              />\r\n            </Form.Group>\r\n            <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlInput2\">\r\n              <Form.Label>Amount Expected</Form.Label>\r\n              <Form.Control\r\n                type=\"number\"\r\n                placeholder=\"Amount you are expecting from second party (in CELO)\"\r\n                onChange={(e) => setExpectedAmount(e.target.value)}\r\n              />\r\n            </Form.Group>\r\n          </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={() => submitMyForm()}>\r\n            Save Changes\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MyForm;\r\n","import React, { useState, useEffect } from \"react\";\nimport MyForm from \"./MyForm\";\nimport Web3 from \"web3\";\nimport BigNumber from \"bignumber.js\";\nimport { newKitFromWeb3 } from \"@celo/contractkit\";\nimport zbondAbi from \"./contract/zbond.abi.json\";\nimport \"./App.css\";\n\nconst ERC20_DECIMALS = 18;\nconst zbondAddress = \"0xD0A044b137DBF7E14464164323139a52e1E0bc31\";\n\nconst truncateAddress = (address) => {\n  if (!address) return;\n  return (\n    address.slice(0, 5) +\n    \"...\" +\n    address.slice(address.length - 4, address.length)\n  );\n};\n\n// Helper function\nconst displayConfirmations = (cfms) => {\n  if (Number(cfms[0]) + Number(cfms[1]) == 0) {\n    return \"0 Confirmations\";\n  } else if (Number(cfms[0]) > 1 && Number(cfms[1]) == 0) {\n    return \"1 [Bond creator],\";\n  } else if (Number(cfms[0]) == 0 && Number(cfms[1] > 1)) {\n    return \"1 [Party involved]\";\n  } else if (Number(cfms[0]) > 0 && Number(cfms[1]) > 1) {\n    return \"2 [Both parties]\";\n  }\n};\n\nconst BondCard = ({\n  bd,\n  catg,\n  signBond,\n  validateBond,\n  confirmBond,\n  closeBond,\n}) => {\n  return (\n    <div className=\"bond-card\">\n      <div className=\"bond-title\">Transaction Receipt</div>\n      <div className=\"bond-info\">\n        <div className=\"info\">\n          <table>\n            <tr>\n              <td>ID: </td>\n              <td>{bd.id}</td>\n            </tr>\n            <tr>\n              <td>Description:</td>\n              <td>{bd.description}</td>\n            </tr>\n            <tr>\n              <td>Amount: </td>\n              <td>\n                {new BigNumber(bd.amount).shiftedBy(-ERC20_DECIMALS).toString()}{\" \"}\n                CELO\n              </td>\n            </tr>\n            <tr>\n              <td>Created By: </td>\n              <td>{truncateAddress(bd.creator)}</td>\n            </tr>\n            <tr>\n              <td>Party Involved: </td>\n              <td>{truncateAddress(bd.partyInvolved)}</td>\n            </tr>\n            <tr>\n              <td>Confirmations: </td>\n              <td>{displayConfirmations(bd.confirmations)}</td>\n            </tr>\n            <tr>\n              <td>Signed: </td>\n              <td>{bd.signed.toString()}</td>\n            </tr>\n            <tr>\n              <td>Validated: </td>\n              <td>{bd.validated.toString()}</td>\n            </tr>\n            <tr>\n              <td>Completed: </td>\n              <td>{bd.completed.toString()}</td>\n            </tr>\n          </table>\n        </div>\n        <div className=\"bond-actions\">\n          <button hidden={catg != \"sign\"} onClick={() => signBond(bd.id)}>\n            Sign\n          </button>\n          <button\n            hidden={catg != \"validate\"}\n            onClick={() => validateBond(bd.id)}\n          >\n            Validate\n          </button>\n          <button hidden={catg != \"confirm\"} onClick={() => confirmBond(bd.id)}>\n            Confirm\n          </button>\n          <button hidden={catg != \"close\"} onClick={() => closeBond(bd.id)}>\n            Close\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst App = () => {\n  const [balance, setBalance] = useState();\n  const [wallet, setWallet] = useState();\n  const [admin, setAdmin] = useState();\n  const [contract, setContract] = useState();\n  const [kit, setKit] = useState();\n  const [bonds, setBonds] = useState();\n  const [bondsCreated, setBondsCreated] = useState();\n  const [bondsToSign, setBondsToSign] = useState([]);\n  const [bondsToConfirm, setBondsToConfirm] = useState([]);\n  const [bondsToValidate, setBondsToValidate] = useState([]);\n  const [bondsToClose, setBondsToClose] = useState([]);\n  const [totalAF, setTotalAF] = useState();\n\n  // get both cUSD balance and RP balance\n  const getBal = async () => {\n    try {\n      const balance = await kit.getTotalBalance(wallet);\n      const bal = balance.CELO.shiftedBy(-ERC20_DECIMALS).toFixed(2);\n      const _contract = new kit.web3.eth.Contract(zbondAbi, zbondAddress);\n      try {\n        const _admin = await _contract.methods.getAdmin().call();\n        setAdmin(_admin);\n      } catch (e) {\n        console.log(e);\n      }\n\n      setBalance(bal);\n      setContract(_contract);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // connect wallet to app\n  const connectWallet = async () => {\n    if (window.celo) {\n      try {\n        await window.celo.enable();\n        const web3 = new Web3(window.celo);\n        let kit = newKitFromWeb3(web3);\n\n        const accounts = await kit.web3.eth.getAccounts();\n        const defaultAccount = accounts[0];\n        kit.defaultAccount = defaultAccount;\n\n        setKit(kit);\n        setWallet(defaultAccount);\n      } catch (error) {\n        console.log(error);\n      }\n    } else {\n      alert(\n        \"You need to install the celo wallet extension in order to use this app\"\n      );\n    }\n  };\n\n  // Get all bonds created from the contract\n  const getBonds = async () => {\n    const _bondsLength = await contract.methods.getLength().call();\n    // const _bondsLength = 2;\n    const _bonds = [];\n    for (let i = 0; i < _bondsLength; i++) {\n      let _bond = new Promise(async (resolve, reject) => {\n        let b = await contract.methods.viewBond(i).call();\n        resolve({\n          id: i,\n          description: b[0],\n          amount: b[1],\n          creator: b[2],\n          partyInvolved: b[3],\n          confirmations: b[4],\n          signed: b[5],\n          validated: b[6],\n          completed: b[7],\n        });\n      });\n      _bonds.push(_bond);\n    }\n    const bnds = await Promise.all(_bonds);\n    console.log(bnds);\n    setBonds(bnds);\n  };\n\n  // create new bond\n  const createBond = async (description, partyInvolved, expectedAmount) => {\n    try {\n      const expected = new BigNumber(expectedAmount)\n        .shiftedBy(ERC20_DECIMALS)\n        .toString();\n      await contract.methods\n        .createBond(description, expected, partyInvolved)\n        .send({ from: wallet });\n    } catch (e) {\n      console.log(e);\n    }\n    await getBonds();\n  };\n  \n  const filterBondsToSign = () => {\n    if (bonds.length > 0) {\n      const _bondsToSign = bonds\n        .filter((bond) => bond.partyInvolved == wallet)\n        .filter((bond) => bond.signed == false);\n      setBondsToSign(_bondsToSign);\n    }\n  };\n\n  const signBond = async (bondId) => {\n    try {\n      await contract.methods.signBond(bondId).send({ from: wallet });      \n      window.location.reload();\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const filterBondsToValidate = () => {\n    if (bonds.length > 0) {\n      const _bondsToValidate = bonds.filter(\n        (bond) => bond.signed == true && bond.validated == false\n      );\n      setBondsToValidate(_bondsToValidate);\n    }\n  };\n\n  const validateBond = async (bondId) => {\n    try {\n      await contract.methods.validateBond(bondId).send({ from: wallet });      \n      window.location.reload();\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const filterBondsToConfirm = () => {\n    if (bonds.length > 0) {\n      const _bondsToConfirm = bonds\n        .filter(\n          (bond) => bond.creator == wallet || bond.partyInvolved == wallet\n        )\n        .filter((bond) => bond.signed && bond.validated)\n        .filter(\n          (bond) =>\n            Number(bond.confirmations[0]) == 0 ||\n            Number(bond.confirmations[1]) == 0\n        );\n      setBondsToConfirm(_bondsToConfirm);\n    }\n  };\n\n  const confirmBond = async (bondId) => {\n    const bond = bonds[bondId];\n    try {\n      if (bond.creator == wallet) {\n        await contract.methods.makeConfirmation(bondId).send({ from: wallet });\n        window.location.reload();\n      } else if (bond.partyInvolved == wallet) {\n        await contract.methods\n          .makeConfirmation(bondId)\n          .send({ from: wallet, value: bond.amount });\n        window.location.reload();\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const filterBondsToClose = () => {\n    if (bonds.length > 0) {\n      const _bondsToClose = bonds\n        .filter((bond) => bond.validated && bond.completed == false)\n        .filter(\n          (bond) =>\n            Number(bond.confirmations[0]) != 0 &&\n            Number(bond.confirmations[1]) != 0\n        );\n      setBondsToClose(_bondsToClose);\n    }\n  };\n\n  const closeBond = async (bondId) => {\n    try {\n      await contract.methods.closeBond(bondId).send({ from: wallet });\n      window.location.reload();\n    } catch (e) {}\n  };\n\n  const filterBondsCreated = () => {\n    if (bonds.length > 0) {\n      const bc = bonds.filter((b) => b.creator == wallet);\n      setBondsCreated(bc);\n    }\n  };\n\n  const withdrawAF = async () => {\n    try {\n      await contract.methods.withdrawAccumulatedFees().send({ from: wallet });\n      window.location.reload();\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const getTAF = async () => {\n    try {\n      const taf = await contract.methods.getTotalAdminFees().call();\n      setTotalAF(taf);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  useEffect(() => {\n    connectWallet();\n  }, []);\n\n  useEffect(() => {\n    if (kit && wallet) {\n      getBal();\n    }\n  }, [kit, wallet]);\n\n  useEffect(() => {\n    if (contract) {\n      getBonds();\n      getTAF();\n    }\n  }, [contract]);\n\n  useEffect(() => {\n    if (bonds) {\n      filterBondsToSign();\n      filterBondsToValidate();\n      filterBondsToConfirm();\n      filterBondsToClose();\n      filterBondsCreated();\n    }\n  }, [bonds]);\n\n  return (\n    <>\n      {admin ? (\n        <div className=\"app\">\n          <div className=\"header\">\n            <div className=\"logo\">Zero Trust</div>\n            <div className=\"notifs\">\n              {wallet != admin && (\n                <div className=\"notif\">\n                  Sign <span>{bondsToSign?.length}</span>\n                </div>\n              )}\n              {wallet == admin && (\n                <div className=\"notif\">\n                  Validate <span>{bondsToValidate?.length}</span>\n                </div>\n              )}\n              {wallet != admin && (\n                <div className=\"notif\">\n                  Confirm <span>{bondsToConfirm?.length}</span>\n                </div>\n              )}\n              {wallet == admin && (\n                <div className=\"notif\">\n                  Close <span>{bondsToClose?.length}</span>\n                </div>\n              )}\n              {wallet == admin && (\n                <div className=\"admin-withd\">\n                  <div>\n                    Accumulated:{\" \"}\n                    <span>\n                      {new BigNumber(totalAF)\n                        .shiftedBy(-ERC20_DECIMALS)\n                        .toString()}{\" \"}\n                      CELO\n                    </span>\n                  </div>\n                  <button onClick={() => withdrawAF()}>Withdraw</button>\n                </div>\n              )}\n            </div>\n            <div className=\"bal\">\n              Bal: <span>{balance}</span>\n            </div>\n          </div>\n          {wallet == admin ? (\n            <>\n              <div className=\"lg-title-heading\">Admin panel</div>\n              <div className=\"sm-title\">Bonds awaiting validation</div>\n              {bondsToValidate?.length > 0 ? (\n                bondsToValidate?.map((bond) => (\n                  <BondCard\n                    bd={bond}\n                    catg=\"validate\"\n                    validateBond={validateBond}\n                  />\n                ))\n              ) : (\n                <div className=\"none-none\">None</div>\n              )}\n              <div className=\"sm-title\">Bond awaiting to be closed</div>\n              {bondsToClose?.length > 0 ? (\n                bondsToClose?.map((bond) => (\n                  <BondCard bd={bond} catg=\"close\" closeBond={closeBond} />\n                ))\n              ) : (\n                <div className=\"none-none\">None</div>\n              )}\n            </>\n          ) : (\n            <>\n              <div className=\"lg-title-heading\">\n                User{\" \"}\n                <span className=\"wallet-span\">{truncateAddress(wallet)}</span>{\" \"}\n                <MyForm create={createBond} />\n              </div>\n              <div className=\"sm-title\">List of bonds you have created and their status</div>\n              <div className=\"bonds\">\n                {bondsCreated?.map((b) => (\n                  <BondCard bd={b} />\n                ))}\n              </div>\n              <div className=\"sm-title\">Bonds waiting to be signed</div>\n              <div className=\"bonds\">\n                {bondsToSign?.length > 0 ? (\n                  bondsToSign?.map((bond) => (\n                    <BondCard bd={bond} catg=\"sign\" signBond={signBond} />\n                  ))\n                ) : (\n                  <div className=\"none-none\">None</div>\n                )}\n              </div>\n              <div className=\"sm-title\">Bonds waiting to be confirmed</div>\n              <div className=\"bonds\">\n                {bondsToConfirm?.length > 0 ? (\n                  bondsToConfirm?.map((bond) => (\n                    <BondCard\n                      bd={bond}\n                      catg=\"confirm\"\n                      confirmBond={confirmBond}\n                    />\n                  ))\n                ) : (\n                  <div className=\"none-none\">None</div>\n                )}\n              </div>\n            </>\n          )}\n        </div>\n      ) : (\n        <div className=\"wait-am\">Wait a moment ...</div>\n      )}\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}